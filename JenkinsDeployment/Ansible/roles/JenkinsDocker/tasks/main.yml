---
- name: Update apt-get repo and cache
  apt:
     update_cache: yes
     force_apt_get: yes
     cache_valid_time: 3600
  when: ansible_distribution == 'Ubuntu'

- name: yum update
  yum:
    name: '*'
    state: latest
  when: ansible_distribution == 'Debian'

- name: Install recommended package (to use AUFS storage drivers)
  apt:
    pkg: linux-image-extra-virtual
    update_cache: yes
    install_recommends: no
    state: present
  when: ansible_distribution == 'Ubuntu'
  become: true

- name: Install packages necessary for APT to use a repository over HTTPS
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    update_cache: yes
    install_recommends: no
    state: present
  become: true
  
- name: Add official Docker GPG key (Ubuntu)
  apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    state: present
  when: ansible_distribution == 'Ubuntu'

- name: Add official Docker GPG key (Debian)
  apt_key:
    url: "https://download.docker.com/linux/debian/gpg"
    state: present
  when: ansible_distribution == 'Debian'

- name: Add official Docker APT repository (Ubuntu)
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: 'docker-official'
    update_cache: yes
  when: ansible_distribution == 'Ubuntu'

- name: Add official Docker APT repository (Debian)
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
    state: present
    filename: 'docker-official'
    update_cache: yes
  when: ansible_distribution == 'Debian'

- name: Install docker-ce and docker-compose
  apt:
    pkg:
      - docker-ce
      - docker-compose
    update_cache: yes
    install_recommends: yes
    state: present

- name: Add users to the Docker group
  user:
    name: "{{ system_user }}"
    groups: docker
    append: yes

- name: copy Docker Compose files
  copy:
    src: files/{{ item }}
    dest: "{{dir_dest}}" 
  loop:
  - docker-compose.yml

# use files parameter to use multiple docker-compose.yml files
- name: deploy Docker Compose stack
  community.docker.docker_compose:
    project_src:
    files:
    - docker-compose.yml

- name: Execute Docker Compose
  docker_compose:
    project_src:  "{{dir_dest}}"
    state: present
  

- name: Get Jenkins password
  shell: docker exec -u 0 jenkins bash -c "cat  /var/jenkins_home/secrets/initialAdminPassword"
  changed_when: false
  register: result

- name: Password to "Unlock Jenkins"
  debug:
    var: result.stdout
